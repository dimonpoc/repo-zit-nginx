version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx-zit
    restart: always
    ports:
      - "80:80"
#      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./certs:/etc/nginx/certs
    networks:
      - zitadel
    depends_on:
      zitadel:
        condition: service_healthy

  zitadel:
    extends:
      service: zitadel-init
    container_name: zitadel
    restart: always
    command: 'start-from-setup --masterkey "${MASTER_KEY}" --config /zitadel.yaml'
    environment:
      ZITADEL_EXTERNALSECURE: false
      ZITADEL_TLS_ENABLED: false
      ZITADEL_EXTERNALPORT: 80
    depends_on:
      zitadel-init:
        condition: 'service_completed_successfully'
      db:
        condition: 'service_healthy'
    networks:
      - zitadel
    healthcheck:
#      test: ["CMD-SHELL", "wget --spider http://localhost:80 || exit 1"]
      test: ["CMD", "/app/zitadel", "ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  zitadel-init:
    user: '$UID'
    image: '${ZITADEL_IMAGE:-ghcr.io/zitadel/zitadel:latest}'
    container_name: zitadl-init
    command: 'init --config /zitadel.yaml'
    environment:
      # Using an external domain other than localhost proofs, that the proxy configuration works.
      # If ZITADEL can't resolve a requests original host to this domain,
      # it will return a 404 Instance not found error.
      ZITADEL_EXTERNALDOMAIN: ${DOMAIN_NAME}
      # In case something doesn't work as expected,
      # it can be handy to be able to read the access logs.
      ZITADEL_LOGSTORE_ACCESS_STDOUT_ENABLED: true
      # For convenience, ZITADEL should not ask to change the initial admin users password.
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORDCHANGEREQUIRED: false
      # database configuration
      ZITADEL_DATABASE_POSTGRES_HOST: db
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: ${DB_PASSWORD}
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: postgres
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: ${ADMIN_DB_PASSWORD}
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
    depends_on:
      db:
        condition: 'service_healthy'
    networks:
      - zitadel
    healthcheck:
      test: ["CMD", "/app/zitadel", "ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


  db:
    image: postgres:16-alpine
    container_name: postgres-zit
    restart: always
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_DB: zitadel
    volumes:
      - 'data:/var/lib/postgresql/data:rw'
    networks:
      - zitadel
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  zitadel:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24

volumes:
  data: